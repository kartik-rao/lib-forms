{"version":3,"sources":["webpack:///./src/components/editors/section/partials/SectionLayoutPreview.tsx","webpack:///./src/components/editors/section/partials/SectionLayoutEditor.tsx","webpack:///./src/components/editors/section/partials/SectionPropertiesEditorView.tsx","webpack:///./src/components/editors/section/SectionEditorView.tsx"],"names":["colors","SectionLayoutPreview","props","title","size","bordered","className","gutter","Object","keys","colspans","map","key","index","span","style","minHeight","padding","background","color","toFixed","formItemLayout","labelCol","xs","offset","sm","wrapperCol","tailFormItemLayout","create","store","Error","colSpanMap","selectedSection","columns","col","localStore","columnSpanMap","updateSpan","value","this","updateGutter","handleSubmit","e","preventDefault","stopPropagation","section","self","column","thisSpan","console","log","notification","info","message","name","description","onSubmit","layout","Item","label","form","getFieldDecorator","initialValue","rules","type","step","max","onChange","parseInt","toString","htmlType","marginTop","onClick","validateFieldsAndScroll","err","values","forEach","p","required","SectionEditorView","showSectionEditor","onClose","setEditable","visible","width","overflow","TabPane","tab","length","SectionLayoutEditor"],"mappings":"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","file":"editors-section.chunk.js","sourcesContent":["import * as React from \"react\";\nimport { Card, Row, Col } from \"antd\";\nimport { useObserver } from 'mobx-react';\n\nexport interface ISectionLayoutPreviewProps {\n    gutter: number;\n    colspans: any;\n}\n\nconst colors = ['rgba(0,160,233,0.6)', 'rgba(0,120,200,0.8)'];\n\nexport const SectionLayoutPreview : React.FC<ISectionLayoutPreviewProps> = (props: ISectionLayoutPreviewProps) => {\n\n    return useObserver(() => {\n        return <Card title=\"Preview\" size=\"small\" bordered={false}>\n            <Row className=\"fl-layout-demo-row\" gutter={props.gutter}>\n                {\n                    Object.keys(props.colspans).map((key, index) => {\n                        return <Col key={key} span={props.colspans[key]}>\n                            <div style={{ minHeight: '50px', padding: '5px 10px', background: index%2 == 0 ? colors[0] : colors[1]}}>\n                                <strong style={{color: 'white'}}>{index+1} - {(100*(props.colspans[key])/24).toFixed(2)}%</strong>\n                            </div>\n                        </Col>\n                    })\n                }\n            </Row>\n        </Card>\n    });\n}","import { Section } from \"@kartikrao/lib-forms-core\";\nimport { Button, Card, Form, notification, Slider } from \"antd\";\nimport { FormComponentProps } from \"antd/lib/form\";\nimport { useLocalStore, useObserver } from \"mobx-react\";\nimport * as React from \"react\";\nimport { editorStoreContext } from \"../../../../store/EditorStoreProvider\";\nimport { SectionLayoutPreview } from \"./SectionLayoutPreview\";\n\nconst formItemLayout = {\n    labelCol: {\n      xs: { span: 12, offset: 4 },\n      sm: { span: 8, offset: 4},\n    },\n    wrapperCol: {\n      xs: { span: 16 },\n      sm: { span: 12 },\n    },\n};\n\nconst tailFormItemLayout = {\n    wrapperCol: {\n      xs: {\n        span: 3,\n        offset: 21,\n      },\n      sm: {\n        span: 3,\n        offset: 21,\n      },\n    },\n};\n\nconst SectionLayoutEditorView: React.FC<FormComponentProps> = (props: FormComponentProps) => {\n    const store = React.useContext(editorStoreContext);\n    if(!store) throw new Error(\"Store is null\");\n    let colSpanMap = {}\n    store.selectedSection.columns.map((col, index) => {\n        colSpanMap[`col${index}`] = col.span;\n    });\n    const localStore = useLocalStore(() => ({\n        gutter: store.selectedSection.gutter as number,\n        columnSpanMap : colSpanMap,\n        updateSpan : function (key, value) {\n            this.columnSpanMap[key] = value;\n        },\n        updateGutter : function (value: number) {\n            this.gutter = value;\n        },\n        handleSubmit : function (e) {\n            e.preventDefault();\n            e.stopPropagation();\n            let {selectedSection: section} = store;\n            let self = this;\n            section.columns.map((column, index) => {\n                let thisSpan = self.columnSpanMap[`col${index}`];\n                if (column.span != thisSpan) {\n                    console.log(`Setting column ${index} span to ${thisSpan}`)\n                    column.span = thisSpan\n                }\n            })\n            if(section.gutter != this.gutter) {\n                section.gutter = this.gutter;\n            }\n            notification.info({message: `Section - ${section.name}`, description:`Saved section layout successfully`});\n            return;\n        }\n    }));\n\n\n\n    return useObserver(() => {\n        return <Card size=\"small\" title=\"Section Layout\">\n            <p>Assign 24 units (aliquots) across columns in a section, use gutter to space columns</p>\n            <Form {...formItemLayout} onSubmit={(e) => localStore.handleSubmit(e)} layout={\"horizontal\"}>\n            <Form.Item label=\"Gutter\">\n                {\n                    props.form.getFieldDecorator('gutter', {\n                        initialValue: localStore.gutter || 0,\n                        rules: [{type: 'number'}]\n                    })(<Slider step={8} max={48} onChange={(e) => localStore.updateGutter(parseInt(e.toString()))}/>)\n                }\n            </Form.Item>\n            {store.selectedSection.columns.map((column, index) => {\n                return <Form.Item label={`Column ${index+1} span`} key={index}>\n                {\n                    props.form.getFieldDecorator(`columnSpans[col${index}]`, {\n                        initialValue: column.span || 0,\n                        rules: [{type: 'number'}]\n                    })(<Slider step={1} max={24} onChange={(e) => localStore.updateSpan(`col${index}`, e)}/>)\n                }\n                </Form.Item>\n            })}\n        <SectionLayoutPreview gutter={localStore.gutter} colspans={localStore.columnSpanMap}/>\n        <Form.Item {...tailFormItemLayout}>\n            <Button type=\"primary\" htmlType=\"submit\" style={{marginTop: '15px'}} onClick={localStore.handleSubmit}>Apply</Button>\n        </Form.Item>\n        </Form>\n    </Card>\n    })\n}\n\nexport default Form.create<FormComponentProps>()(SectionLayoutEditorView);","import { Button, Card, Form, Input, notification } from \"antd\";\nimport { FormComponentProps } from \"antd/lib/form\";\nimport { useLocalStore, useObserver } from \"mobx-react\";\nimport * as React from \"react\";\nimport { editorStoreContext } from \"../../../../store/EditorStoreProvider\";\n\nexport interface ISectionPropertiesEditorViewProps extends FormComponentProps {\n\n}\n\nconst formItemLayout = {\n    labelCol: {\n      xs: { span: 12, offset: 4 },\n      sm: { span: 8, offset: 4},\n    },\n    wrapperCol: {\n      xs: { span: 16 },\n      sm: { span: 12 },\n    },\n};\n\nconst tailFormItemLayout = {\n    wrapperCol: {\n      xs: {\n        span: 3,\n        offset: 21,\n      },\n      sm: {\n        span: 3,\n        offset: 21,\n      },\n    },\n};\n\nexport const SectionPropertiesEditorView : React.FC<ISectionPropertiesEditorViewProps> = (props: ISectionPropertiesEditorViewProps) => {\n    const store = React.useContext(editorStoreContext);\n    if(!store) throw new Error(\"Store is null\");\n\n    const localStore = useLocalStore(() => ({\n        gutter: null as number,\n        handleSubmit : (e) => {\n            e.preventDefault();\n            e.stopPropagation();\n            let {selectedSection: section} = store;\n            props.form.validateFieldsAndScroll((err, values) => {\n                if (!err) {\n                    notification.info({message: `Section - ${section.name}`,\n                        description:\"Section properties applied successfully\"});\n                    Object.keys(values).forEach((p: string) => {\n                        section[p] = values[p];\n                    });\n                }\n            });\n            return;\n        }\n    }));\n\n    return useObserver(() => {\n        return store.selectedSection ? <Card size=\"small\" bordered={false}>\n            <Form {...formItemLayout} onSubmit={(e) => localStore.handleSubmit(e)} layout={\"horizontal\"}>\n                <Form.Item required={true} label=\"Name\">\n                        {\n                        props.form.getFieldDecorator('name', {\n                            initialValue: store.selectedSection.name,\n                            rules: [{type: 'string'}]\n                        })(<Input/>)\n                    }\n                </Form.Item>\n                <Form.Item required={true} label=\"Title\">\n                        {\n                        props.form.getFieldDecorator('title', {\n                            initialValue: store.selectedSection.title,\n                            rules: [{type: 'string'}]\n                        })(<Input/>)\n                    }\n                </Form.Item>\n                <Form.Item {...tailFormItemLayout}>\n                    <Button type=\"primary\" htmlType=\"submit\" style={{marginTop: '15px'}} onClick={localStore.handleSubmit}>Apply</Button>\n                </Form.Item>\n            </Form>\n        </Card> : <></>\n    })\n}\n\nexport default Form.create<ISectionPropertiesEditorViewProps>()(SectionPropertiesEditorView);","import { Col, Drawer, Row, Tabs } from \"antd\";\nimport { useObserver } from \"mobx-react\";\nimport * as React from \"react\";\nimport { editorStoreContext } from \"../../../store/EditorStoreProvider\";\nimport SectionLayoutEditor from \"./partials/SectionLayoutEditor\";\nimport SectionPropertiesEditorView from \"./partials/SectionPropertiesEditorView\";\n\nexport const SectionEditorView : React.FC = (props) => {\n    const store = React.useContext(editorStoreContext);\n    if(!store) throw new Error(\"Store is null\");\n    return useObserver(() => {\n        return store.showSectionEditor && store.selectedSection && <Drawer title={`Section \"${store.selectedSection.name}\" `}\n            onClose={() => store.setEditable(null)} visible={store.showSectionEditor == true}\n            width={700}\n            style={{ overflow: 'hidden'}}>\n            {   <Tabs size=\"small\">\n                    <Tabs.TabPane tab=\"Settings\" key=\"1\">\n                        <Row><Col span={24}><SectionPropertiesEditorView /></Col></Row>\n                    </Tabs.TabPane>\n                    {store.selectedSection.columns.length > 0 && <Tabs.TabPane tab=\"Layout\" key=\"2\">\n                        <Row>\n                            <Col span={24}>\n                                <SectionLayoutEditor />\n                            </Col>\n                        </Row>\n                    </Tabs.TabPane>}\n                </Tabs>\n            }\n        </Drawer>\n    });\n}"],"sourceRoot":""}