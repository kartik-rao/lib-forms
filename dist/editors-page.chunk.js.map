{"version":3,"sources":["webpack:///./src/components/editors/page/PageEditorView.tsx"],"names":["create","props","store","Error","localStore","handleSubmit","e","preventDefault","stopPropagation","selectedPage","page","form","validateFieldsAndScroll","err","values","info","message","name","description","Object","keys","forEach","p","hasErrors","errors","getFieldsError","filter","field","length","showPageEditor","title","id","onClose","setEditable","visible","width","closable","maskClosable","style","overflow","paddingBottom","TabPane","key","tab","size","bordered","onSubmit","layout","Item","required","label","help","getFieldDecorator","initialValue","rules","type","subtitle","htmlType","marginTop","onClick"],"mappings":"gQAgFe,cAAKA,QAAL,CAzEwCC,IACnD,MAAMC,EAAQ,aAAiB,KAC/B,IAAIA,EAAO,MAAM,IAAIC,MAAM,iBAC3B,MAAMC,EAAa,YAAc,KAAM,CACnCC,aAAe,SAAUC,GACrBA,EAAEC,iBACFD,EAAEE,kBACF,IAAKC,aAAcC,GAAQR,EAC3BD,EAAMU,KAAKC,wBAAwB,CAACC,EAAKC,KAChCD,IACD,IAAaE,KAAK,CAACC,kBAAmBN,EAAKO,OAAQC,YAAY,yCAC/DC,OAAOC,KAAKN,GAAQO,QAASC,IACzBZ,EAAKY,GAAKR,EAAOQ,SAMjCC,UAAY,WACR,IAAIC,EAASvB,EAAMU,KAAKc,iBAIxB,OAHuBN,OAAOC,KAAKI,GAAQE,OAAQC,KACtCH,EAAOG,IAEIC,OAAS,MAIzC,OAAO,YAAY,IACR1B,EAAM2B,gBAAkB3B,EAAMO,cAAgB,gBAAC,IAAM,CAACqB,eAAgB5B,EAAMO,aAAaQ,aAAaf,EAAMO,aAAasB,IAAI,MAChIC,QAAS,IAAM9B,EAAM+B,YAAY,MAAOC,QAAShC,EAAM2B,eACvDM,MAAO,IAAKC,UAAWhC,EAAWmB,YAAac,cAAejC,EAAWmB,YACzEe,MAAO,CAAEC,SAAU,OAAQC,cAAe,UAEtC,gBAAC,IAAI,KACL,gBAAC,IAAKC,QAAO,CAACC,IAAI,IAAIC,IAAI,YAC1B,gBAAC,IAAI,CAACC,KAAK,QAAQC,UAAU,GACzB,gBAAC,IAAI,iBAAK,IAAc,CAAEC,SAAWxC,GAAMF,EAAWC,aAAaC,GAAIyC,OAAQ,eAC3E,gBAAC,IAAKC,KAAI,CAACC,UAAU,EAAMC,MAAM,OAAOC,KAAK,0DAErClD,EAAMU,KAAKyC,kBAAkB,OAAQ,CACjCC,aAAcnD,EAAMO,aAAaQ,KACjCqC,MAAO,CAAC,CAACC,KAAM,UAAW,CAACN,UAAU,EAAMjC,QAAS,wBAFxDf,CAGG,gBAAC,UAAK,QAGjB,gBAAC,IAAK+C,KAAI,CAACC,UAAU,EAAMC,MAAM,QAAQC,KAAK,8DAEtClD,EAAMU,KAAKyC,kBAAkB,QAAS,CAClCC,aAAcnD,EAAMO,aAAaqB,MACjCwB,MAAO,CAAC,CAACC,KAAM,UAAW,CAACN,UAAU,EAAMjC,QAAS,yBAFxDf,CAGG,gBAAC,UAAK,QAGjB,gBAAC,IAAK+C,KAAI,CAACE,MAAM,WAAWC,KAAK,4DAEzBlD,EAAMU,KAAKyC,kBAAkB,WAAY,CACrCC,aAAcnD,EAAMO,aAAa+C,SACjCF,MAAO,CAAC,CAACC,KAAM,YAFnBtD,CAGG,gBAAC,UAAK,QAGjB,gBAAC,IAAK+C,KAAI,iBAAK,KACX,gBAAC,IAAM,CAACO,KAAK,UAAUE,SAAS,SAASnB,MAAO,CAACoB,UAAW,QAASC,QAASvD,EAAWC,cAAY","file":"editors-page.chunk.js","sourcesContent":["import { Button, Card, Drawer, Form, Input, notification, Tabs } from \"antd\";\nimport { FormComponentProps } from \"antd/lib/form\";\nimport { useLocalStore, useObserver } from \"mobx-react\";\nimport * as React from \"react\";\nimport { editorStoreContext } from \"../../../store/EditorStoreProvider\";\nimport { formItemLayout, tailFormItemLayout } from \"../common/FormLayoutCommon\";\n\nconst PageEditorView : React.FC<FormComponentProps> = (props: FormComponentProps) => {\n    const store = React.useContext(editorStoreContext);\n    if(!store) throw new Error(\"Store is null\");\n    const localStore = useLocalStore(() => ({\n        handleSubmit : function (e) {\n            e.preventDefault();\n            e.stopPropagation();\n            let {selectedPage: page} = store;\n            props.form.validateFieldsAndScroll((err, values) => {\n                if (!err) {\n                    notification.info({message: `Page - ${page.name}`, description:\"Page properties applied successfully\"});\n                    Object.keys(values).forEach((p: string) => {\n                        page[p] = values[p];\n                    });\n                }\n            });\n            return;\n        },\n        hasErrors : function (): boolean {\n            let errors = props.form.getFieldsError();\n            let fieldsWithErrors = Object.keys(errors).filter((field) => {\n                return !!errors[field]\n            });\n            return fieldsWithErrors.length > 0;\n        }\n    }));\n\n    return useObserver(() => {\n        return store.showPageEditor && store.selectedPage && <Drawer title={`Page \"${store.selectedPage.name}\" (id=${store.selectedPage.id||''})`}\n            onClose={() => store.setEditable(null)} visible={store.showPageEditor}\n            width={600} closable={!localStore.hasErrors()} maskClosable={!localStore.hasErrors()}\n            style={{ overflow: 'auto', paddingBottom: '108px' }}>\n            {\n                <Tabs>\n                <Tabs.TabPane key=\"1\" tab=\"Settings\">\n                <Card size=\"small\" bordered={false}>\n                    <Form {...formItemLayout} onSubmit={(e) => localStore.handleSubmit(e)} layout={\"horizontal\"}>\n                        <Form.Item required={true} label=\"Name\" help=\"Choose a name that distinguishes this page from others\">\n                            {\n                                props.form.getFieldDecorator('name', {\n                                    initialValue: store.selectedPage.name,\n                                    rules: [{type: 'string'}, {required: true, message: 'A name is required'}]\n                                })(<Input/>)\n                            }\n                        </Form.Item>\n                        <Form.Item required={true} label=\"Title\" help=\"The title of this page, displayed above the page's content\">\n                            {\n                                props.form.getFieldDecorator('title', {\n                                    initialValue: store.selectedPage.title,\n                                    rules: [{type: 'string'}, {required: true, message: 'A title is required'}]\n                                })(<Input/>)\n                            }\n                        </Form.Item>\n                        <Form.Item label=\"Subtitle\" help=\"A subtitle for this page, displayed underneath the title\">\n                            {\n                                props.form.getFieldDecorator('subtitle', {\n                                    initialValue: store.selectedPage.subtitle,\n                                    rules: [{type: 'string'}]\n                                })(<Input/>)\n                            }\n                        </Form.Item>\n                        <Form.Item {...tailFormItemLayout}>\n                            <Button type=\"primary\" htmlType=\"submit\" style={{marginTop: '15px'}} onClick={localStore.handleSubmit}>Apply</Button>\n                        </Form.Item>\n                    </Form>\n                </Card>\n                </Tabs.TabPane>\n                </Tabs>\n            }\n        </Drawer>\n    });\n}\n\nexport default Form.create()(PageEditorView);\n\n"],"sourceRoot":""}